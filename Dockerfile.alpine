# Ultra-optimized Dockerfile for Vercel (targeting < 250MB)
# Multi-stage build with Alpine Linux for minimal size
FROM python:3.12-alpine as builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    curl

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /usr/local/bin/

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml uv.lock ./

# Create and configure virtual environment
ENV VIRTUAL_ENV=/app/.venv
RUN uv venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Install only production dependencies
RUN uv sync --frozen --no-dev --no-cache

# Remove build dependencies to reduce size
RUN apk del gcc musl-dev libffi-dev

# Production stage with minimal Alpine base
FROM python:3.12-alpine

# Install only runtime dependencies
RUN apk add --no-cache \
    libffi \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser

# Set working directory
WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder --chown=appuser:appuser /app/.venv /app/.venv

# Copy application code
COPY --chown=appuser:appuser app/ app/

# Copy only essential vector store data (consider external storage for production)
COPY --chown=appuser:appuser data/vector_store/ data/vector_store/

# Set environment variables
ENV PATH="/app/.venv/bin:$PATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Use exec form for better signal handling
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]
